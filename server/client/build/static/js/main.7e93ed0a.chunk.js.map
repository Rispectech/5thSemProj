{"version":3,"sources":["assets/nft.png","assets/XBTO.png","assets/DevFund.png","assets/LACITY.png","App.jsx","reportWebVitals.js","index.js"],"names":["App","provider","WalletConnectProvider","infuraId","rpc","React","useState","web3provider","setWeb3provider","address","setAddress","loading","setLoading","enable","providers","Web3Provider","disconnect","mintRequest","fetch","toastId","toast","response","json","data","minted","update","render","type","isLoading","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","error","on","accounts","length","chainId","code","reason","console","log","className","src","nft","alt","href","target","rel","onClick","ThreeDots","height","xbto","devfund","lacity","position","newestOnTop","rtl","pauseOnFocusLoss","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","StrictMode"],"mappings":"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","file":"static/js/main.7e93ed0a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/nft.59f23ade.png\";","export default __webpack_public_path__ + \"static/media/XBTO.b7e281bc.png\";","export default __webpack_public_path__ + \"static/media/DevFund.9c9f4b36.png\";","export default __webpack_public_path__ + \"static/media/LACITY.47474788.png\";","import React from \"react\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport { providers } from \"ethers\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport LoadingIcons from \"react-loading-icons\";\n\nimport \"./App.css\";\nimport nft from \"./assets/nft.png\";\n\nimport xbto from \"./assets/XBTO.png\";\nimport devfund from \"./assets/DevFund.png\";\nimport lacity from \"./assets/LACITY.png\";\n\nfunction App() {\n  const provider = new WalletConnectProvider({\n    infuraId: \"f8ccbba88cde4fbf8cfa8c82dc353e08\",\n    rpc: {\n      137: \"https://matic-mainnet.chainstacklabs.com\",\n      80001: \"https://matic-mumbai.chainstacklabs.com\",\n    },\n  });\n\n  const [web3provider, setWeb3provider] = React.useState(null);\n  const [address, setAddress] = React.useState(null);\n  const [loading, setLoading] = React.useState(false);\n\n  async function enableWalletConnect() {\n    await provider.enable();\n    setWeb3provider(new providers.Web3Provider(provider));\n  }\n\n  provider.on(\"accountsChanged\", (accounts) => {\n    if (accounts.length > 0) {\n      setWeb3provider(new providers.Web3Provider(provider));\n      setAddress(accounts[0]);\n    }\n  });\n\n  provider.on(\"chainChanged\", (chainId) => {\n    if (chainId === 137) {\n      setWeb3provider(new providers.Web3Provider(provider));\n    }\n  });\n\n  provider.on(\"disconnect\", (code, reason) => {\n    setWeb3provider(null);\n    setAddress(null);\n    console.log(code, reason);\n  });\n\n  async function disconnect() {\n    await provider.disconnect();\n  }\n\n  async function mint() {\n    if (loading) {\n      return;\n    }\n    const mintRequest = fetch(\"/mint/\" + address);\n    setLoading(true);\n    const toastId = toast.loading(\"Mint en cours...\");\n    try {\n      const response = await mintRequest;\n      const data = await response.json();\n      if (data.minted) {\n        toast.update(toastId, {\n          render: \"Mint réussi !\",\n          type: \"success\",\n          isLoading: false,\n          autoClose: 5000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true,\n        });\n      } else {\n        toast.update(toastId, {\n          render: data.error,\n          type: \"error\",\n          isLoading: false,\n          autoClose: 5000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true,\n        });\n      }\n      setLoading(false);\n    } catch (e) {\n      toast.update(toastId, {\n        render: \"Erreur lors de la requête\",\n        type: \"error\",\n        isLoading: false,\n        autoClose: 5000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n      });\n      setLoading(false);\n    }\n  }\n\n  return (\n    <>\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <div className=\"card\">\n            <img src={nft} alt=\"\" />\n            <div className=\"infos\">\n              <h5>Afterwork by LaCity - 24/06/22</h5>\n              <p>\n                Contract{\" \"}\n                <a\n                  href=\"https://polygonscan.com/address/0x8303A493ff94565a71D6a5a60D303aC2F3153983\"\n                  target=\"_blank\"\n                  rel=\"noreferrer\"\n                >\n                  0x8303...3983\n                </a>\n              </p>\n              {!web3provider ? (\n                <button onClick={enableWalletConnect} className=\"connect\">\n                  Connecter son Wallet\n                </button>\n              ) : (\n                <>\n                  <button onClick={mint} className=\"mint\">\n                    {loading ? (\n                      <LoadingIcons.ThreeDots\n                        className=\"loading\"\n                        height=\".6rem\"\n                      />\n                    ) : (\n                      \"Mint votre NFT\"\n                    )}\n                  </button>\n                  <button onClick={disconnect} className=\"disconnect\">\n                    X\n                  </button>\n                </>\n              )}\n            </div>\n          </div>\n        </header>\n      </div>\n      <div className=\"partners\">\n        <img src={xbto} alt=\"\" />\n        <img src={devfund} alt=\"\" />\n      </div>\n      <div className=\"logo\">\n        <img src={lacity} alt=\"\" />\n        <span>LaCity</span>\n      </div>\n      <ToastContainer\n        position=\"top-right\"\n        autoClose={5000}\n        hideProgressBar={false}\n        newestOnTop={false}\n        closeOnClick\n        rtl={false}\n        pauseOnFocusLoss\n        draggable\n        pauseOnHover\n      />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}